---
# create a vpc with name, cidr block,dns support

- name: create a new ec2 VPC
    ec2_vpc_net:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      name: "{{ vpc_name }}" 
      cidr_block: "{{ vpc_cidr }}"
      region: "{{ region }}"
      dns_support: yes
      dns_hostnames: yes
      tenancy: default
      state: "{{ state }}"
    register: ec2_vpc_net_result  
- name: create ec2 vpc internet gateway  
    ec2_vpc_igw:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}" 
      tags:
        Name: "{{ igw_name }}"
    register: igw_result  
- name: create ec2 vpc subnet
    ec2_vpc_subnet:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      az: "{{ zone }}"     
      state: "{{ state }}"
      cidr: "{{ subNetCidrBlock }}"
      map_public: yes
      resource_tags:
        Name: "{{ subnet_name }}"
    register: subnet_result  
- name: create ec2 security group
    ec2_group:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ securitygroup_name }}"
      description: "{{ securitygroup_name }}"
      tags:
        Name: "{{ securitygroup_name  }}"
      rules:
      - proto: tcp
        ports:
        - 80
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow all on port 80
    register: security_group_results  
- name: create ec2 VPC Network access control list
    ec2_vpc_nacl:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      name: "{{ acl_name }}"
      subnets: [ "{{ subnet_result.subnet.id }}" ]
      tags:
        Name: "{{ acl_name }}"
        Description: "{{ acl_name }}"      
      ingress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        - [200, 'tcp', 'allow', "0.0.0.0/0", null, null, 80, 80]
      egress:
        # rule no, protocol, allow/deny, cidr, icmp_type, icmp_code, port from, port to
        - [200, 'tcp', 'allow', "0.0.0.0/0", null, null, 80, 80]
    register: acl_results  
- name: create ec2 VPC public subnet route table
    ec2_vpc_route_table:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
      region: "{{ region }}"
      state: "{{ state }}"
      tags:
        Name: "{{ route_table_name }}"
      subnets: [ "{{ subnet_result.subnet.id }}" ]
      
      # create routes
      routes:
        - dest: "0.0.0.0/0" 
          gateway_id: "{{ igw_result.gateway_id }}"
    register: public_route_table  - name: print out new vpc, subnet id, and security group for vpc
    debug:
      msg: "Usage Use subnet id: {{ subnet_result.subnet.id }} and security group: {{ security_group_results.group_id }} to create your ec2 instances "
